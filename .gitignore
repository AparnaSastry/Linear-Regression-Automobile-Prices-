# Loading Libraries

library(MASS);library(car);
library(tidyr);library(dplyr)
library(stringr);library(readxl);
library(ggplot2);library(ggthemes);library(corrplot)


#------------------------------------------------------------------------------------# 
#                                LOADING DATA                                        #
#------------------------------------------------------------------------------------# 

# Loading Data
car_price <- read.csv("CarPrice_Assignment.csv", stringsAsFactors = F)

# Loading Data Dictionary for Data Understanding
carprices_Dictionary <- read_excel("Data Dictionary - carprices.xlsx", range  ="H4:N32")

carprices_Dictionary <- setNames(carprices_Dictionary [1:26,c(1,5)] , 
                                 c("Column Name","Data Dictionary"))

#------------------------------------------------------------------------------------# 
#                                  Data understanding                                #
#------------------------------------------------------------------------------------# 

##1. Seeing the summary & structure & checking other aspects of car_price_dataset dataframe

summary(car_price) 
str(car_price)
head(car_price)
nrow(car_price) # 205

##2. Checking for duplicate values in the car_ID of the car_price_dataset dataframe

anyDuplicated(car_price$car_ID) # 0
sum(duplicated(car_price$car_ID)) # 0

##3. Checking if the number of unique Car_ID is equal to the nymber of rows in the car_price dataframe

length(unique(car_price$car_ID)) == nrow(car_price) # TRUE

##4. Checking total number of NA values in the car_ID of car_price dataframe

sum(is.na(car_price$car_ID)) # 0

##4a. Checking number of NA values per each columns in the car_price dataframe

colSums(is.na(car_price), na.rm = FALSE) # 0 NA Values for every column on the car_price dataframe

##5. Checking total number of NULL values in the car_price dataframe

sum(is.null(car_price)) # 0

##6. Checking total number of empty values in the car_price dataframe

length(which(car_price == "")) # 0
length(which(car_price == ""|car_price == "-"|car_price == " "))

##6a. Checking number of empty values per each columns in the car_price dataframe

colSums(car_price == ""|car_price == "-"|car_price == " ", na.rm = FALSE)
# No empty values Values for every column on the car_price dataframe

##7. Checking the class of each variable in the dataset car_price
lapply(car_price,class)

which(lapply(car_price,class) == "integer")
# car_ID  symboling curbweight enginesize horsepower    peakrpm    citympg highwaympg 
#      1          2         14         17         22         23         24         25 

which(lapply(car_price,class) == "numeric")
# wheelbase        carlength         carwidth        carheight        boreratio 
#        10               11               12               13               19 
# stroke compressionratio            price 
#     20               21               26 

which(lapply(car_price,class) == "character")
# CarName       fueltype     aspiration     doornumber        carbody 
#       3              4              5              6              7 
# drivewheel enginelocation     enginetype cylindernumber     fuelsystem 
#         8              9             15             16             18 

##7a. Checking the values of Categorical character columns

summary(as.factor(car_price$CarName))
summary(as.factor(car_price$fueltype))
summary(as.factor(car_price$aspiration))
summary(as.factor(car_price$doornumber))
summary(as.factor(car_price$carbody))
summary(as.factor(car_price$drivewheel))
summary(as.factor(car_price$enginelocation))
summary(as.factor(car_price$enginetype))
summary(as.factor(car_price$cylindernumber))
summary(as.factor(car_price$fuelsystem))


# DATA UNDERSTANDING:
# car_ID: A unique identifier for each observation
# Symboling: Its assigned insurance risk rating. Possible values are -2,-1,0,1,2 or 3
#            A value of +3 indicates that the auto is risky, -3 that it is probably pretty safe.
#            (Independent - Categorical Integer Variable with 6 levels)
# car Name: Name of car company & the model of the car 
#           (Independent - Categorical Variable with 147 levels)
# fueltype: Type of car fuel. Possible values are gas or diesel 
#           (Independent - Categorical Variable with 2 levels)
# aspiration: Type of air intake used in a car. Possible values are  std or turbo
#             (Independent - Categorical Variable with 2 levels)
# doornumber: Number of doors in a car. Possible values are four or two 
#             (Independent - Categorical Variable with 2 levels)
# carbody: Type of car body. Possible values are convertible,hardtop,hatchback,sedan or wagon 
#         (Independent - Categorical Variable with 5 levels)
# drivewheel: Type of drive wheel . Possible values are 4wd,fwd or rwd 
#             (Independent - Categorical Variable with 3 levels)
# enginelocation: Location of car engine. Possible values are front or rear
#                 (Independent - Categorical Variable with 2 levels)
# wheelbase: Weelbase of car 
#            (Independent - Continuous Variable)
# carlength: Length of car 
#            (Independent - Continuous Variable)
# carwidth: Width of car 
#           (Independent - Continuous Variable)
# carheight: Height of car 
#            (Independent - Continuous Variable)
# curbweight: The weight of a car without occupants or baggage. 
#             (Independent - Continuous Numeric Variable)
# enginetype: Type of car engine. Possible values are dohc,dohcv,l,ohc,ohcf,ohcv or rotor 
#             (Independent - Categorical Variable with 7 levels)
# cylindernumber: Number of cylinders in the car. Possible values are eight,five,four,six,three,twelve or two
#                 (Independent - Categorical Variable with 7 levels)
# enginesize: Size of car 
#             (Independent - Continuous Variable)
# fuelsystem: Fuel system of car. Possible values are 1bbl,2bbl,4bbl,idi,mfi,mpfi,spdi or spfi
#             (Independent - Categorical Variable with 8 levels)
# boreratio: Bore ratio of car 
#            (Independent - Continuous Variable)
# stroke: Stroke or volume inside the engine 
#         (Independent - Continuous Variable)
# compressionratio: compression ratio of car 
#                   (Independent - Continuous Variable)
# horsepower: Horsepower of car
#             (Independent - Continuous Variable)
# peakrpm: Car peak rpm 
#          (Independent - Continuous Variable)
# citympg: Mileage of car in city 
#         (Independent - Continuous Variable)
# highwaympg: Mileage of car on highway 
#             (Independent - Continuous Variable)
# price: Price of car 
#        (Dependent - Continuous Variable)


# DATA UNDERSTANDING: 
# There are 26 Variables in total with 205 Observations
# There is 1 unique identifier variable for each observation given by car_ID which is an integer value
# There are a total of 11 Independent categorical variables
# Of the 11 Independent categorical variables, 1 variable is of integer-class & 10 variables are of character-class
# There 13 Independent Continuous Variables excluding the car_ID
# There is 1 Dependent Continuous variable 
# There are no missing/empty values in the dataset
# There are no NA values in the dataset
# There are no NULL values in the dataset

#------------------------------------------------------------------------------------# 
#                                    DATA PREPARATION                                #
#------------------------------------------------------------------------------------# 

##1. Creating a new dataframe car_price_new & converting all the character columns 
# of car_price to lower case 

lapply(car_price,class) # Checking the class of each variable of car_price

car_price_new <- mutate_if(car_price,is.character,tolower)

str(car_price_new) # Checking the structure of car_price_new


##2. Extracting 'company name' from the 'carName' column.
# Creating a new column carCompany as the independent variable for the model building

car_price_new$carCompany <- word(car_price_new$CarName,1)

summary(as.factor(car_price_new$carCompany))
# alfa-romero        audi         bmw       buick   chevrolet       dodge       honda 
#           3           7           8           8           3           9          13 
# isuzu      jaguar       mazda     mercury  mitsubishi      nissan     peugeot 
#     4           3          17           1          13          18          11 
# plymouth     porsche     renault        saab      subaru      toyota  volkswagen 
#        7           5           2           6          12          32          12 
# volvo 
#    11

# As can be seen from the summary of carCompany column,the mis-spelled names are
# mazda is mis-spelled as maxda two times
# porsche is mis-spelled as porcshce one time
# toyota is mis-spelled as toyouta one time
# volkswagen is mis-spelled as vokswagen one time & as vw two times

##2a. Correcting mis-spelled name 'maxda' to 'mazda'

car_price_new$carCompany <- gsub(pattern = "maxda", 
                                 replacement = "mazda",car_price_new$carCompany)
summary(as.factor(car_price_new$carCompany))

##2b. Correcting mis-spelled name 'porcshce' to 'porsche'

car_price_new$carCompany <- gsub(pattern = "porcshce", 
                                 replacement = "porsche",car_price_new$carCompany)
summary(as.factor(car_price_new$carCompany))

##2c. Correcting mis-spelled name 'toyouta' to 'toyota'

car_price_new$carCompany <- gsub(pattern = "toyouta", 
                                 replacement = "toyota",car_price_new$carCompany)
summary(as.factor(car_price_new$carCompany))

##2d. Correcting mis-spelled name 'vokswagen' & 'vw' to 'volkswagwen'

car_price_new$carCompany <- gsub(pattern = "^vokswagen$|^vw$", 
                                 replacement = "volkswagen",car_price_new$carCompany)
summary(as.factor(car_price_new$carCompany))


##3. Checking the values of Categorical character columns for spellings

# summary(as.factor(car_price_new$symboling))
# # -2 -1  0  1  2  3 
# #  3 22 67 54 32 27 

summary(as.factor(car_price_new$fueltype))
# diesel    gas 
#     20    185 

summary(as.factor(car_price_new$aspiration))
# std turbo 
# 168    37 

summary(as.factor(car_price_new$doornumber))
# four  two 
#  115   90 

summary(as.factor(car_price_new$carbody))
# convertible     hardtop   hatchback       sedan       wagon 
#           6           8          70          96          25 

summary(as.factor(car_price_new$drivewheel))
# 4wd fwd rwd 
#   9 120  76 

summary(as.factor(car_price_new$enginelocation))
# front  rear 
#   202     3 

summary(as.factor(car_price_new$enginetype))
# dohc dohcv     l   ohc  ohcf  ohcv rotor 
#   12     1    12   148    15    13     4

summary(as.factor(car_price_new$cylindernumber))
# eight   five   four    six  three twelve    two 
#     5     11    159     24      1      1      4 

summary(as.factor(car_price_new$fuelsystem))
# 1bbl 2bbl 4bbl  idi  mfi mpfi spdi spfi 
#   11   66    3   20    1   94    9    1 

summary(as.factor(car_price_new$carCompany))
# alfa-romero        audi         bmw       buick   chevrolet       dodge       honda 
#           3           7           8           8           3           9          13 
# isuzu      jaguar       mazda     mercury  mitsubishi      nissan     peugeot 
#     4           3          17           1          13          18          11 
# plymouth     porsche     renault        saab      subaru      toyota  volkswagen 
#        7           5           2           6          12          32          12 
# volvo 
#    11 

##4. Removing the CarName column & Reodering columns,
# since we need only the carCompany & not the carName

car_price_new <- car_price_new[c(1:2,27,4:9,15,16,18,10:14,17,19:26)]

str(car_price_new)

##5. Converting variables of integer-class to numeric-class.
# Except Car_ID column & Symboling column, all other continuous variable are converted.
# Car_ID column is a unique identifier for each observation with Integer-class
# Symboling column is a categorical variable with Integer-class

car_price_new[-c(1,2)] <- mutate_if(car_price_new[-c(1,2)],is.integer,as.numeric)

lapply(car_price_new,class) # Checking the class of each variable of car_price_new

str(car_price_new) # Checking the structure of car_price_new

#------------------------------------------------------------------------------------# 
#                         EDA - Univariate Analysis                                  #
#------------------------------------------------------------------------------------# 

##1.  Univariate analysis of the dependent 'price' variable

summary(car_price_new$price)
# Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
# 5118    7788   10295   13277   16503   45400 

range(car_price_new$price) #  5118 45400

Plot_price <- ggplot(car_price_new,aes(x = price)) +
  geom_histogram(bins = 8,binwidth = 5000,aes(fill = ..count..)) +
  scale_x_continuous(breaks=seq(0,max(car_price_new$price),5000)) +
  scale_y_continuous(breaks=seq(0,80,5)) +
  labs(title = "Plot showing Count of cars w.r.t. Price",
       x = "Price", y = "Count of Cars")

print(Plot_price)

# OBSERVATION w.r.t. 'price' variable:
# Frequency of cars increases as the price decreases
# Majority of cars fall in a lesser price range

##2. Univariate analysis of independent categorical variables

##2a. converting independent categorical character-class variables to factors
cp_factors <- mutate_if(car_price_new,is.character,as.factor)
str(cp_factors) # Checking the structure of cp_factors

##2b. Frequency of 'symboling' variable

table(cp_factors$symboling, exclude = NULL)
which.max(table(cp_factors$symboling, exclude = NULL)) # 0

Plot_symboling <- ggplot(cp_factors,aes(x = as.factor(symboling), fill = as.factor(symboling))) + 
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 0.5)) +
  labs(title = "Plot showing frequency of cars w.r.t. Symboling",
       x = "Symboling", y = "Frequency")

print(Plot_symboling)

# OBSERVATION w.r.t. 'symboling' variable 
# There a few cars with 'safe' assigned insurance risk rating

##2c. Frequency of 'carCompany' variable

table(cp_factors$carCompany, exclude = NULL)
which.max(table(cp_factors$carCompany, exclude = NULL)) # toyota

Plot_carCompany <- ggplot(cp_factors,aes(x = carCompany, fill = carCompany)) + 
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  labs(title = "Plot showing frequency of cars w.r.t. car companies",
       x = "Car Company Name", y = "Frequency")

print(Plot_carCompany)

# OBSERVATION w.r.t. 'carCompany' variable 
# In total there are 22 car companies/car manufacturers
# Toyota has the most number of cars followed by Nissan & Mazda in the given dataset

##2d. Frequency of 'fueltype' variable

table(cp_factors$fueltype, exclude = NULL)
which.max(table(cp_factors$fueltype, exclude = NULL)) # gas

Plot_fueltype <- ggplot(cp_factors,aes(x = fueltype, fill = fueltype)) + 
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  labs(title = "Plot showing frequency of cars w.r.t. fuel type",
       x = "Fuel Type", y = "Frequency")

print(Plot_fueltype)

# OBSERVATION w.r.t. 'fueltype' variable :
# Majority cars are  Gas fueled cars.

##2e. Frequency of 'aspiration' variable

table(cp_factors$aspiration, exclude = NULL)
which.max(table(cp_factors$aspiration, exclude = NULL)) # std

Plot_aspiration <- ggplot(cp_factors,aes(x = aspiration, fill = aspiration)) + 
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  labs(title = "Plot showing frequency of cars w.r.t. aspiration",
       x = "Aspiration", y = "Frequency")

print(Plot_aspiration)

# OBSERVATION w.r.t. 'aspiration' variable :
# Cars with standard aspiration is higher than the cars with turbo aspiration

##2f. Frequency of 'doornumber' variable

table(cp_factors$doornumber,exclude = NULL)
which.max(table(cp_factors$doornumber,exclude = NULL)) # four

Plot_doornumber <- ggplot(cp_factors,aes(x = doornumber, fill = doornumber)) + 
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  labs(title = "Plot showing frequency of cars w.r.t. Number of doors",
       x = "Number of doors", y = "Frequency")

print(Plot_doornumber)

# OBSERVATION w.r.t. 'doornumber' variable :
# Cars with four doors is higher than the cars with two doors

##2g. Frequency of 'carbody' variable

table(cp_factors$carbody,exclude = NULL)
which.max(table(cp_factors$carbody,exclude = NULL)) # sedan

Plot_carbody <- ggplot(cp_factors,aes(x = carbody, fill = carbody)) + 
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  labs(title = "Plot showing frequency of cars w.r.t. type of car body",
       x = "Car Body", y = "Frequency")

print(Plot_carbody)

# OBSERVATIONS w.r.t. 'carbody' variable:
# Frequency of sedan cars is highest followed by hatchback cars 
# There are very few convertible & hardtop cars

##2h. Frequency of 'drivewheel' variable

table(cp_factors$drivewheel,exclude = NULL)
which.max(table(cp_factors$drivewheel,exclude = NULL)) # fwd

Plot_drivewheel <- ggplot(cp_factors,aes(x = drivewheel, fill = drivewheel)) + 
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  labs(title = "Plot showing frequency of cars w.r.t. type of drive wheel",
       x = "Drive Wheel", y = "Frequency")

print(Plot_drivewheel)

# OBSERVATIONs w.r.t. 'drivewheel' variable:
# Cars with forward wheel drive is higher in number followed by cars with rear wheel drive
# There are very few four-wheel drive cars

##2i. Frequency of 'enginelocation' variable

table(cp_factors$enginelocation,exclude = NULL)
which.max(table(cp_factors$enginelocation,exclude = NULL)) # front

Plot_enginelocation <- ggplot(cp_factors,aes(x = enginelocation, fill = enginelocation)) + 
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  labs(title = "Plot showing frequency of cars w.r.t. type of engine location",
       x = "Engine Location", y = "Frequency")

print(Plot_enginelocation)

# OBSERVATION w.r.t 'enginelocation' variable:
# Number of cars with front engine location is high
# There are very few cars with rear engine location

##2j. Frequency of 'enginetype' variable

table(cp_factors$enginetype,exclude = NULL)
which.max(table(cp_factors$enginetype,exclude = NULL)) # ohc

Plot_enginetype <- ggplot(cp_factors,aes(x = enginetype, fill = enginetype)) + 
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  labs(title = "Plot showing frequency of cars w.r.t. type of engine type",
       x = "Engine Type", y = "Frequency")

print(Plot_enginetype)

# OBSERVATION w.r.t. 'enginetype' variable:
# Number of cars with ohc engine type is highest followed cars with ohcf engine type

##2k. Frequency of 'cylindernumber' variable

table(cp_factors$cylindernumber,exclude = NULL)
which.max(table(cp_factors$cylindernumber,exclude = NULL)) # four

Plot_cylindernumber <- ggplot(cp_factors,aes(x = cylindernumber, fill = cylindernumber)) + 
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  labs(title = "Plot showing frequency of cars w.r.t. number of cylinders",
       x = "Number of cylinders", y = "Frequency")

print(Plot_cylindernumber)

# OBSERVATION w.r.t 'cylindernumber' variable:
# Frequency of cars with four cylinders is highest followed cars with six cylinders

##2l. Frequency of 'fuelsystem' variable

table(cp_factors$fuelsystem,exclude = NULL)
which.max(table(cp_factors$fuelsystem,exclude = NULL)) # mpfi

Plot_fuelsystem <- ggplot(cp_factors,aes(x = fuelsystem, fill = fuelsystem)) +
  geom_histogram(stat = "count") +
  stat_count(aes(y=..count.., label=..count..), geom="text", vjust=-.5) +
  labs(title = "Plot showing frequency of cars w.r.t. type of fuel sysyem",
       x = "Fuel system", y = "Frequency")

print(Plot_fuelsystem)

# OBSERVATION w.r.t.  'fuelsystem' variable:
# Frequency of cars with 'mpfi' fuel system is highest followed by cars with '2bbl' fuel system

##3. Univariate analysis of Independent continuous variables

##3a. Checking the indices of continuous variables
which(lapply(car_price_new, class) == "numeric")
#  wheelbase        carlength         carwidth        carheight       curbweight 
#         13               14               15               16               17 
# enginesize        boreratio           stroke compressionratio       horsepower 
#         18               19               20               21               22 
#    peakrpm          citympg       highwaympg            price 
#         23               24               25               26 

##3b. Checking the summary statistics of the continuous variables
lapply(car_price_new[,c(13:26)], summary)

##3c. Checking the range of the continuous variables
lapply(car_price_new[,c(13:26)], range)

#------------------------------------------------------------------------------------# 
#                         EDA - Bivariate Analysis                                   #
#------------------------------------------------------------------------------------# 
##4.Bivariate analysis of continuous variables

##4a. Creating a dataframe with only continuous variables
cp_numeric <- car_price_new[lapply(car_price_new,class) == "numeric"]


##4b. Creating a correlation matrix
correlation_matrix <- round(cor(cp_numeric),2)


##4c. Creating a correlation plot from the correlation matrix
corrplot(correlation_matrix, order = "AOE",method = "square", number.font = 8, 
         number.cex = 0.8,addCoef.col= "black",cl.cex = 0.8,tl.cex = 0.9)


## OBSERVATION w.r.t. the correlation_matrix & Plot_correlation
#4c.1 Price is significantly positively correlated to the following variables:
# horsepower,enginesize,curbweight,carwidth & carlength
#4c.2 Price is significaltly correlated negatively to citympg & highwaympg variables


##4d. Creating a scatter plot matrix with 'horsepower' & 'enginesize'variables 
# where correlation is significant w.r.t price

cp_scatter_1 <- cp_numeric[,c('horsepower','enginesize','price')]

pairs(cp_scatter_1,cex.labels = 1.5)


##4e. Creating a scatter plot matrix with 'curbweight','carwidth' & 'carlength' variables 
# where correlation is significant w.r.t price

cp_scatter_2 <- cp_numeric[,c('curbweight','carwidth','carlength','price')]

pairs(cp_scatter_2,cex.labels = 1.5)


##4f. Creating a scatter plot matrix with 'citympg' & 'highwaympg' variables 
# where correlation is significant w.r.t price

cp_scatter_3 <- cp_numeric[,c('citympg' ,'highwaympg','price')]

pairs(cp_scatter_3,cex.labels = 1.5)


##4g. Scatter plot matrix for all the variables 

cp_scatter_all <- cp_numeric[,c('horsepower','enginesize','curbweight',
                                'carwidth','carlength','citympg' ,
                                'highwaympg','price')]
pairs(cp_scatter_all,cex.labels = 1.5)


##4g.1. Scatter plot without the regression line

scatterplotMatrix(cp_scatter_all,var.labels=colnames(cp_scatter_all), 
                  diagonal="histogram", 
                  plot.points=TRUE, smoother=TRUE,
                  reg.line=FALSE,transform=FALSE,
                  cex=par("cex"), cex.axis =par("cex.axis"), 
                  cex.labels = 1.5, cex.main=par("cex.main")) 


##4g.2. Scatter plot with the regression line

scatterplotMatrix(cp_scatter_all, var.labels=colnames(cp_scatter_all), 
                  diagonal=c("histogram"), 
                  adjust=1, plot.points=TRUE, smooth=T,reg.line = TRUE,
                  cex=par("cex"), cex.axis =par("cex.axis"), 
                  cex.labels = 1.5, cex.main=par("cex.main"))


## OBSERVATIONS w.r.t the scatter plot matrix between the continyes variables
# The scatter plot shows correlations between most of the variables are slightly curved
# Price increases (almost linearly) with the increase in horesepower & increase in engine-size
# 'citympg' & 'highwaympg' are negatively corelated with price


##5a. Bivariate analysis between horsepower & price

Plot_hp_price <- ggplot(car_price_new,aes(x= horsepower,y=price,color = symboling)) + 
  geom_point(aes(alpha = 0.4)) +
  scale_x_continuous(breaks=seq(0,max(car_price_new$enginesize),20)) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),5000)) +
  labs(title = "Plot showing relation between price & horsepower",
       y = "Price", x = "Horsepower")
print(Plot_hp_price)

# OBSERVATION:
# Higher horsepower cars are expensive than lower horsepower cars


##5b. Bivariate analysis between price & enginesize

Plot_enginesize_price <-ggplot(car_price_new,aes(x= enginesize,y=price,color = symboling)) + 
  geom_point(aes(alpha = 0.6)) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),5000)) +
  scale_x_continuous(breaks=seq(0,max(car_price_new$enginesize),20)) +
  labs(title = "Plot showing relation between price & engine size",
       y = "Price", x = "Engine Size")

print(Plot_enginesize_price)

# OBSERVATION:
# With the increase of the size of the engine, price increases.


##5c. Bivariate analysis between price & curbweight

Plot_curbweight_price <- ggplot(car_price_new,aes(x= curbweight,y=price,color = symboling)) + 
  geom_point(aes(alpha = 0.6)) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),5000)) +
  scale_x_continuous(breaks=seq(0,max(car_price_new$curbweight),400)) +
  labs(title = "Plot showing relation between price & curbweight",
       x = "Curbweight",y = "Price")

print(Plot_curbweight_price)

# OBSERVATION:
# With the increase of the curbweight, price increases.


##5d. Bivariate analysis between price & carlength

Plot_carlength_price <- ggplot(car_price_new,aes(x= carlength,y=price,color = symboling)) + 
  geom_point(aes(alpha = 0.6)) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),5000)) +
  scale_x_continuous(breaks=seq(0,max(car_price_new$carlength),10)) +
  labs(title = "Plot showing relation between price & carlength",
       x = "carlength",y = "Price")

print(Plot_carlength_price)

# OBSERVATION:
# With the increase of the carlength, price increases, although not linearly.


##5e. Bivariate analysis between price & carwidth

Plot_carwidth_price <- ggplot(car_price_new,aes(x= carwidth,y=price,color = symboling)) + 
  geom_point(aes(alpha = 0.6)) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),5000)) +
  scale_x_continuous(breaks=seq(0,max(car_price_new$carwidth),1)) +
  labs(title = "Plot showing relation between price & carwidth",
       x = "carwidth",y = "Price")

print(Plot_carwidth_price)

# OBSERVATION:
# Increase in carwidth tends to increase in price, although not linearly.


##5f. Bivariate analysis between price & citympg

Plot_citympg_price <- ggplot(car_price_new,aes(x= citympg,y=price,color = symboling)) + 
  geom_point(aes(alpha = 0.7)) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),5000)) +
  scale_x_continuous(breaks=seq(0,max(car_price_new$citympg),1)) +
  labs(title = "Plot showing relation between price & citympg",
       x = "City-mpg",y = "Price")

print(Plot_citympg_price)

# OBSERVATION:
# Increase in city-mpg tends to decrease the price, although not linearly.


##5g. Bivariate analysis between price & highwaympg

Plot_highwaympg_price <- ggplot(car_price_new,aes(x= highwaympg,y=price,color = symboling)) + 
  geom_point(aes(alpha = 0.7)) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),5000)) +
  scale_x_continuous(breaks=seq(0,max(car_price_new$highwaympg),1)) +
  labs(title = "Plot showing relation between price & highwaympg",
       x = "Highway-mpg",y = "Price")

print(Plot_highwaympg_price)

# OBSERVATION:
# cars with lesser Highway-mpg cost more than the cars with average or higher Highway-mpg


##6. Bivariate analysis between categorical Independent variables and price

##6a. Analysis between CarCompany & Price

Plot_price_carcompany <- ggplot(cp_factors,aes(x= carCompany,y= price, color = fueltype))+ 
  geom_boxplot() +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),4000)) +
  theme(axis.text.x = element_text(angle = 90, hjust = 1, vjust = 0.5)) +
  labs(title = "Plot showing price of cars w.r.t. car companies",
       x = "Car Company Name", y = "Price")

print(Plot_price_carcompany)

# OBSERVATIONs:
# Majority of the cars are within the price range of 20000
# BMW, Buick,Jaguar & Porsche are costly cars which are gas based cars
# Only few car companies are making Diesel based cars are


##6b. Analysis between fueltype & Price

Plot_price_fueltype <- ggplot(cp_factors,aes(x= fueltype,y= price ))+ 
  geom_boxplot() +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),2000)) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 0.5)) +
  labs(title = "Plot showing price of cars w.r.t. fueltype",
       x = "Type of Fuel", y = "Price")

print(Plot_price_fueltype)

# OBSERVATIONs:
# The median price of diesel cars is higher than the median price of gas fueled cars
# The gas based cars which are costly are probably high-end cars(BMW, Buick,Jaguar & Porsche)


##6c. Analysis between aspiration & Price

Plot_price_aspiration <- ggplot(cp_factors,aes(x= aspiration,y= price))+ 
  geom_boxplot(width = 0.2) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),2000)) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 0.5)) +
  stat_summary(geom="text", fun.y=quantile,aes(label=sprintf("%1.1f", ..y..)),
               position=position_nudge(x=0.15), size=3.5) +
  labs(title = "Plot showing price of cars w.r.t. aspiration",
       x = "Type of Aspiration", y = "Price")

print(Plot_price_aspiration)

# OBSERVATIONs:
# The price of turbo aspiration cars is higher than the std aspiration cars
# The outliers in the std aspiration imply the costly cars have std aspiration


##6d. Analysis between drivewheel & Price

Plot_price_drivewheel <- ggplot(cp_factors,aes(x= drivewheel,y= price))+ 
  geom_boxplot(width = 0.2) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),2000)) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 0.5)) +
  stat_summary(geom="text", fun.y=quantile,aes(label=sprintf("%1.1f", ..y..)),
               position=position_nudge(x=0.17), size=3.5) +
  labs(title = "Plot showing price of cars w.r.t. drivewheel",
       x = "Type of Drive Wheel", y = "Price")

print(Plot_price_drivewheel)

# OBSERVATIONs:
# The price range of rwd(rear wheel drive) cars is wider compared to 4wd & fwd
# The outliers in rwd imply the costly cars have rwd


##6e. Analysis between enginelocation & Price

Plot_price_enginelocation <- ggplot(cp_factors,aes(x= enginelocation,y= price))+ 
  geom_boxplot(width = 0.2) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),2000)) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 0.5)) +
  stat_summary(geom="text", fun.y=quantile,aes(label=sprintf("%1.1f", ..y..)),
               position=position_nudge(x=0.17), size=3.5) +
  labs(title = "Plot showing price of cars w.r.t. enginelocation",
       x = "Type of Engine location", y = "Price")

print(Plot_price_enginelocation)

# OBSERVATIONs:
# On an average, the rear engine location cars are costly than the front engine location
# The outliers in front engine location cars imply that the costly cars have front engne location


##6f. Analysis between enginetype & Price

Plot_price_enginetype <- ggplot(cp_factors,aes(x= enginetype,y= price))+ 
  geom_boxplot(width = 0.2) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),2000)) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 0.5)) +
  stat_summary(geom="text", fun.y=quantile,aes(label=sprintf("%1.1f", ..y..)),
               position=position_nudge(x=0.25), size=3.5) +
  labs(title = "Plot showing price of cars w.r.t. enginetype",
       x = "Type of engine", y = "Price")

print(Plot_price_enginetype)

# OBSERVATIONs:
# The ohcv engine type has a wider range in-terms of price


##6g. Analysis between cylindernumber & Price

Plot_price_cylindernumber <- ggplot(cp_factors,aes(x= cylindernumber,y= price))+ 
  geom_boxplot(width = 0.2) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),2000)) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 0.5)) +
  stat_summary(geom="text", fun.y=quantile,aes(label=sprintf("%1.1f", ..y..)),
               position=position_nudge(x=0.25), size=3.5) +
  labs(title = "Plot showing price of cars w.r.t. cylindernumber",
       x = "Number of cylinders", y = "Price")

print(Plot_price_cylindernumber)

# OBSERVATIONs:
# The median price of twelve cylinder cars is highest followed closely by eight cylinder cars.
# The six cylinder car have a wider range in terms of price.
# car with 12 cylinders & 8 cylinders will cost more on an average


##6h. Analysis between fuelsystem & Price

Plot_price_fuelsystem <- ggplot(cp_factors,aes(x= fuelsystem,y= price))+ 
  geom_boxplot(width = 0.2) +
  scale_y_continuous(breaks=seq(0,max(car_price_new$price),2000)) +
  theme(axis.text.x = element_text(angle = 0, hjust = 1, vjust = 0.5)) +
  stat_summary(geom="text", fun.y=quantile,aes(label=sprintf("%1.1f", ..y..)),
               position=position_nudge(x=0.25), size=3.5) +
  labs(title = "Plot showing price of cars w.r.t. fuelsystem",
       x = "Type of Fuel system", y = "Price")

print(Plot_price_fuelsystem)

# OBSERVATIONs:
# Costly cars have an mpfi fuel system
# The cars with 1bb1 & 2bbl fuel system have have a lower price range
# Diesel fueled cars have idi fuelsystem



#------------------------------------------------------------------------------------# 
#      Dummy Variable craeation & converting factors into numeric variables          #
#------------------------------------------------------------------------------------# 
##1. Dummy Variable Creation

##1a. converting drivewheel variable, factor with 3 levels to numerical variables

# Creating the dummy variable for drivewheel variable 

dummy_drivewheel <- data.frame(model.matrix( ~drivewheel, data = cp_factors))
str(dummy_drivewheel)

# Creating a new dataset 'cp_dummy' by
# Combining the dummy_drivewheel & cp_factors dataset.
# The first column of the dummy_drivewheel dataframe & 
# the column of which the dummy was created are removed in the cp_dummy dataset

cp_dummy <- cbind(cp_factors[,-8], dummy_drivewheel[,-1])


##1b. converting enginetype variable, factor with 7 levels to numerical variables

# Creating the dummy variable for enginetype variable
dummy_enginetype <- data.frame(model.matrix( ~enginetype, data = cp_factors))
str(dummy_enginetype)

# Combining the dummy_enginetype & cp_dummy dataset.
# The first column of the dummy_enginetype dataframe & 
# the column of which the dummy variable was created are removed in the cp_dummy dataset
cp_dummy <- cbind(cp_dummy[,-9], dummy_enginetype[,-1])


##1c. Converting fuelsystem variable, factor with 8 levels to numerical variables

# Creating the dummy variable for fuelsystem variable
dummy_fuelsystem <- data.frame(model.matrix( ~fuelsystem, data = cp_factors))
str(dummy_fuelsystem)

# Combining the dummy_fuelsystem & cp_dummy dataset.
# The first column of the dummy_fuelsystem dataframe & 
# the column of which the dummy variable was created are removed in the cp_dummy dataset
cp_dummy <- cbind(cp_dummy[,-10], dummy_fuelsystem[,-1])

##1d. Converting carbody variable, factor with 5 levels to numerical variables

# Creating the dummy variable for carbody variable
dummy_carbody <- data.frame(model.matrix( ~carbody, data = cp_factors))
str(dummy_carbody)

# Combining the dummy_carbody & cp_dummy dataset.
# The first column of the dummy_carbody dataframe & 
# the column of which the dummy variable was created are removed in the cp_dummy dataset
cp_dummy <- cbind(cp_dummy[,-7], dummy_carbody[,-1])


##1e. Converting cylindernumber variable, factor with 7 levels to numerical variables

# Creating the dummy variable for cylindernumber variable
dummy_cylindernumber <- data.frame(model.matrix( ~cylindernumber, data = cp_factors))
str(dummy_cylindernumber)

# Combining the dummy_cylindernumber & cp_dummy dataset.
# The first column of the dummy_cylindernumber dataframe & 
# the column of which the dummy variable was created are removed in the cp_dummy dataset
cp_dummy <- cbind(cp_dummy[,-8], dummy_cylindernumber[,-1])


##1f. Converting carCompany variable, factor with 22 levels to numerical variables

# Creating the dummy variable for carCompany variable
dummy_carCompany <- data.frame(model.matrix( ~carCompany, data = cp_factors))
str(dummy_carCompany)

# Combining the dummy_carCompany & cp_dummy dataset.
# The first column of the dummy_carCompany dataframe & 
# the column of which the dummy variable was created are removed in the cp_dummy dataset
cp_dummy <- cbind(cp_dummy[,-3], dummy_carCompany[,-1])


##1g. Converting fueltype variable, factor with 2 levels to numerical variables

summary(cp_dummy$fueltype)
levels(cp_dummy$fueltype) <- c(1,0)
cp_dummy$fueltype <- as.numeric(levels(cp_dummy$fueltype))[cp_dummy$fueltype]
summary(cp_dummy$fueltype)


##1h. Converting aspiration variable, factor with 2 levels to numerical variables

summary(cp_dummy$aspiration)
levels(cp_dummy$aspiration) <- c(0,1)
cp_dummy$aspiration <- as.numeric(levels(cp_dummy$aspiration))[cp_dummy$aspiration]
summary(cp_dummy$aspiration)


##1i. Converting doornumber variable, factor with 2 levels to numerical variables

summary(cp_dummy$doornumber)
levels(cp_dummy$doornumber) <- c(1,0)
cp_dummy$doornumber <- as.numeric(levels(cp_dummy$doornumber))[cp_dummy$doornumber]
summary(cp_dummy$doornumber)


##1j. Converting enginelocation variable, factor with 2 levels to numerical variables

summary(cp_dummy$enginelocation)
levels(cp_dummy$enginelocation) <- c(0,1)
cp_dummy$enginelocation <- 
  as.numeric(levels(cp_dummy$enginelocation))[cp_dummy$enginelocation]
summary(cp_dummy$enginelocation)


# Checking the structure of cp_dummy to ensure all the variables are numeric-class
str(cp_dummy)

#------------------------------------------------------------------------------------# 
#                                  Model Building                                    #
#------------------------------------------------------------------------------------#

##1. Creating a dataframe cp_1 by removing the car_ID variable.
# Since car_ID is a unique identifier for each observation, it need not be considered
# for building a model

cp_1 <- cp_dummy[,-1]

##2. Separating cp_dummy data into training and testing data
set.seed(100)
trainindices = sample(1:nrow(cp_1), 0.7*nrow(cp_1))
cp_train = cp_1[trainindices,]
cp_test = cp_1[-trainindices,]


##3. Building model_1 containing all variables

model_1 <-lm(price~.,data=cp_train)

##3a. Checking the summary of model_1

summary(model_1)
# Residual standard error: 1429 on 87 degrees of freedom
# Multiple R-squared:  0.9813,	Adjusted R-squared:  0.9694 
# F-statistic: 82.79 on 55 and 87 DF,  p-value: < 2.2e-16

##3b. Checking the correlation between independent variables for more insights
corr_independent_var <- round(cor(cp_1[, -19]),2)
corr_independent_var

##4. Passing model_1 as an argument to stepAIC function for the selection of
# significant variables & elimination of insignificant variables.

step_1<- stepAIC(model_1, direction="both")

step_1


##5. Using the last model equation of stepwise method to create model_2

model_2 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                curbweight + enginesize + boreratio + stroke + horsepower + 
                peakrpm + drivewheelrwd + enginetypedohcv + enginetypel + 
                enginetypeohc + enginetypeohcf + enginetyperotor + fuelsystem2bbl + 
                fuelsystemmpfi + carbodyhardtop + carbodyhatchback + carbodysedan + 
                carbodywagon + cylindernumberfive + cylindernumberthree + 
                carCompanybmw + carCompanybuick + carCompanydodge + carCompanyhonda + 
                carCompanyjaguar + carCompanymazda + carCompanymitsubishi + 
                carCompanynissan + carCompanyplymouth + carCompanyrenault + 
                carCompanysaab + carCompanytoyota + carCompanyvolkswagen, 
              data = cp_train)

##5a. checking the summary of model_2

summary(model_2)
# Residual standard error: 1340 on 106 degrees of freedom
# Multiple R-squared:  0.9799,	Adjusted R-squared:  0.9731 
# F-statistic: 143.6 on 36 and 106 DF,  p-value: < 2.2e-16

# OBSERVATIONS w.r.t. model_2:
# model_2 & model_1 have almost similar values for Multiple R-squared & Adjusted R-squared
# model_2 has 36 variables compared to 64 variables of model_1


##5b. Checking for multicollinearity in model_2 to identify &
# remove the variables with high vif & statistically insignificant p-values

vif(model_2)

# The variables with VIF along their respective p-value within brackets

#VARIABLE -          aspiration       enginelocation             carwidth 
#VIF      -            5.781631             4.607293             9.332600 
#p-Value  -      (5.10e-06 ***)       (4.64e-06 ***)          (< 2e-16 ***)

#VARIABLE -        curbweight           enginesize            boreratio 
#VIF      -          22.230477            30.887502             5.355187 
#p-Value  -      (0.005683 ** )        (6.24e-10 ***)      (0.100787    )

#VARIABLE -              stroke           horsepower              peakrpm 
#VIF      -            5.198173            33.442102             5.072275 
#p-Value  -       (0.050198 .)        (0.128925    )      (0.003045 ** )

#VARIABLE -       drivewheelrwd      enginetypedohcv          enginetypel 
#VIF      -           5.928307             3.146283             4.877740 
#p-Value  -      (0.000469 ***)      ( 0.003857 ** )       (0.001441 ** )

#VARIABLE -        enginetypeohc       enginetypeohcf      enginetyperotor 
#VIF      -           7.139596             8.297046             3.365361 
#p-Value  -      (0.088500 .  )        (0.000129 ***)      (3.09e-07 ***)

#VARIABLE -      fuelsystem2bbl       fuelsystemmpfi       carbodyhardtop 
#VIF      -           5.432478             8.989290             3.622647 
#p-Value  -        (0.032181 *)        (0.095684 .  )      (0.041095 *  )

#VARIABLE -    carbodyhatchback         carbodysedan         carbodywagon 
#VIF      -           14.135976            13.784587             7.658158 
#p-Value  -      ( 0.004923 ** )       (0.007196 ** )      (0.003759 ** )

#VARIABLE -   cylindernumberfive  cylindernumberthree        carCompanybmw 
#VIF      -           2.635235             1.832363             1.460770 
#p-Value  -     (0.053572 .  )        (0.016791 *  )      (5.71e-13 ***)

#VARIABLE -      carCompanybuick      carCompanydodge      carCompanyhonda 
#VIF      -           4.796174             2.058928             5.477703 
#p-Value  -     (8.78e-06 ***)        (5.47e-06 ***)      (0.034956 *  )

#VARIABLE -    carCompanyjaguar      carCompanymazda carCompanymitsubishi 
#VIF      -            2.609991             3.477795             2.894308 
#p-Value  -      (0.015118 *  )        (1.48e-05 ***)      ( 4.14e-08 ***)

#VARIABLE -     carCompanynissan   carCompanyplymouth    carCompanyrenault 
#VIF      -           3.106926             2.462224             1.883173 
#p-Value  -      (4.09e-05 ***)        (2.69e-05 ***)      (0.000240 ***)

#VARIABLE -       carCompanysaab     carCompanytoyota carCompanyvolkswagen 
#VIF      -            2.337512             3.897246             2.480429 
#p-Value  -      (0.107221    )        (1.16e-05 ***)      (6.29e-05 ***)



# OBSERVATIONS w.r.t. model_2: 
#1.The following variables as they have a relatively high p-value
# stroke; horsepower; boreratio ; enginetypeohc; fuelsystem2bbl; 
# fuelsystemmpfi; carbodyhardtop ;cylindernumberfive; cylindernumberthree;
# carCompanyhonda; carCompanyjaguar;
#2. variable 'horsepower' has a high VIF and a high p-value


##6. Building model_3 by removing the 'horsepower' variable
#'horsepower' has a high VIF and a high p-value

# Checking the correlation between enginesize & horsepower
cor(cp_1$enginesize,cp_1$horsepower) # 0.8097687


model_3 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                curbweight + enginesize + boreratio + stroke + 
                peakrpm + drivewheelrwd + enginetypedohcv + enginetypel + 
                enginetypeohc + enginetypeohcf + enginetyperotor + fuelsystem2bbl + 
                fuelsystemmpfi + carbodyhardtop + carbodyhatchback + carbodysedan + 
                carbodywagon + cylindernumberfive + cylindernumberthree + 
                carCompanybmw + carCompanybuick + carCompanydodge + carCompanyhonda + 
                carCompanyjaguar + carCompanymazda + carCompanymitsubishi + 
                carCompanynissan + carCompanyplymouth + carCompanyrenault + 
                carCompanysaab + carCompanytoyota + carCompanyvolkswagen, 
              data = cp_train)


##6a. Summary of model_3

summary(model_3)

# Residual standard error: 1349 on 107 degrees of freedom
# Multiple R-squared:  0.9795,	Adjusted R-squared:  0.9728 
# F-statistic: 145.8 on 35 and 107 DF,  p-value: < 2.2e-16

# summary(model_2)
# # Residual standard error: 1340 on 106 degrees of freedom
# # Multiple R-squared:  0.9799,	Adjusted R-squared:  0.9731 
# # F-statistic: 143.6 on 36 and 106 DF,  p-value: < 2.2e-16

# OBSERVATION w.r.t. model_3:
# Removing 'horsepower' variable has not affected the Adjusted R-squared value
# or the R-squared value much compared to model_2


##6b.Checking for multicollinearity in model_3
vif(model_3)

# OBSERVATIONS w.r.t. model_3:
#6b.1. Variables with very high VIF along with their p-values are: 
# enginesize - 21.034033( 1.10e-10 ***) ; 
# curbweight-20.583597 (0.014488 *  ) ;
# carbodyhatchback -  14.081995 ( 0.003857 ** ) ;
# carbodysedan -  13.759956(0.008971 ** )
#6b.2. Variables with  high p-values are
# VARIABLE -        VIF      - (p-value)
# boreratio -       5.245907 - (0.152015)
# enginetypeohc -   6.851036 - (0.155057)
# fuelsystem2bbl -  4.347993 - (0.101500)    
# fuelsystemmpfi -  5.581323 - (0.353489)



##7. Building model_4 based on the above observations.
# The following variables are removed due to their high p-value 
# VARIABLE -        VIF      -  (p-value)
# boreratio -       5.245907 - (0.152015)
# enginetypeohc -   6.851036 - (0.155057)
# fuelsystem2bbl -  4.347993 - (0.101500)    
# fuelsystemmpfi -  5.581323 - (0.353489)

model_4 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                curbweight + enginesize +  stroke + 
                peakrpm + drivewheelrwd + enginetypedohcv + enginetypel + 
                enginetypeohcf + enginetyperotor +  
                carbodyhardtop + carbodyhatchback + carbodysedan + 
                carbodywagon + cylindernumberfive + cylindernumberthree + 
                carCompanybmw + carCompanybuick + carCompanydodge + carCompanyhonda + 
                carCompanyjaguar + carCompanymazda + carCompanymitsubishi + 
                carCompanynissan + carCompanyplymouth + carCompanyrenault + 
                carCompanysaab + carCompanytoyota + carCompanyvolkswagen, 
              data = cp_train)

##7a. Summary of model_4

summary(model_4)
# Residual standard error: 1376 on 111 degrees of freedom
# Multiple R-squared:  0.9778,	Adjusted R-squared:  0.9716 
# F-statistic:   158 on 31 and 111 DF,  p-value: < 2.2e-16

#summary(model_3) # Residual standard error: 1349 on 107 degrees of freedom
# Multiple R-squared:  0.9795,	Adjusted R-squared:  0.9728 
# F-statistic: 145.8 on 35 and 107 DF,  p-value: < 2.2e-16

# OBSERVATION w.r.t. model_4:
# Removing 'enginetypeohc','fuelsystem2bbl','fuelsystemmpfi'& 'boreratio'
# has not affected the Multiple R-squared & Adjusted R-squared much compared to model_3

##7b. Checking for multicollinearity in model_4

vif(model_4)

# OBSERVATIONS w.r.t. model_4:
#7b.1. Variables with very high VIF along with their p-values are: 
# VARIABLE            -        VIF      -     (p-value)
# enginesize          -   15.653018     -     ( 1.10e-10 ***)  
# curbweight          -   20.490507     -     (0.014488 *  ) 
# carbodyhatchback    -   12.864176     -     ( 0.003857 ** ) 
# carbodysedan        -   12.685187     -     (0.008971 ** )
#7b.2. Variables with  high p-values along with their VIF values are
# VARIABLE           -  VIF         -   (p-value)
# cylindernumberfive -  2.385813    -   (0.065663 .  )
# curbweight         -  20.490507   -   (0.015137 * )
# carbodyhardtop     -  3.365066    -   (0.020942 *  )    
# carCompanysaab     -  1.982563    -   (0.032157 *)



##8. Building model_5 based on the above observations.
# The following variables are removed
# VARIABLE           -  VIF         -   (p-value)
# curbweight         -  20.490507   -   (0.015137 * )

model_5 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                enginesize +  stroke + 
                peakrpm + drivewheelrwd + enginetypedohcv + enginetypel + 
                enginetypeohcf + enginetyperotor +  
                carbodyhardtop + carbodyhatchback + carbodysedan + 
                carbodywagon + cylindernumberfive + cylindernumberthree + 
                carCompanybmw + carCompanybuick + carCompanydodge + carCompanyhonda + 
                carCompanyjaguar + carCompanymazda + carCompanymitsubishi + 
                carCompanynissan + carCompanyplymouth + carCompanyrenault + 
                carCompanysaab + carCompanytoyota + carCompanyvolkswagen, 
              data = cp_train)


##8a. Summary of model_5
summary(model_5)
# Residual standard error: 1407 on 112 degrees of freedom
# Multiple R-squared:  0.9766,	Adjusted R-squared:  0.9704 
# F-statistic:   156 on 30 and 112 DF,  p-value: < 2.2e-16

#summary(model_4) # Residual standard error: 1376 on 111 degrees of freedom
# Multiple R-squared:  0.9778,	Adjusted R-squared:  0.9716 
# F-statistic:   158 on 31 and 111 DF,  p-value: < 2.2e-16

# OBSERVATION w.r.t. model_5:
# Removing 'curbweight' variable has not affected 
# the Multiple R-squared & Adjusted R-squared much compared to model_4

# Checking for multicollineaity
vif(model_5)

# OBSERVATIONS w.r.t. model_5:
#8b.1. Variables with very high VIF along with their p-values are: 
# VARIABLE            -        VIF      -     (p-value)
# carbodyhatchback    -   12.675552     -     (0.002519 ** ) 
# carbodysedan        -   12.636265     -     (0.002519 ** )
# enginesize          -   9.842944      -     ( < 2e-16 ***)  
# carwidth            -   7.182381      -     (3.80e-07 ***) 
#8b.2. Variables with  high p-values along with their VIF values are
# VARIABLE           -  VIF         -   (p-value)
# cylindernumberfive -  2.244738    -   (0.206880)
# carCompanysaab     -  1.792415    -   (0.151018)
# cylindernumberthree-  1.648361    -   ( 0.059865 . )


##9. Building model_6 based on the above observations.
# The following variables are removed
# VARIABLE           -  VIF         -   (p-value)
# cylindernumberfive -  2.244738    -   (0.206880)

model_6 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                enginesize +  stroke + 
                peakrpm + drivewheelrwd + enginetypedohcv + enginetypel + 
                enginetypeohcf + enginetyperotor +  
                carbodyhardtop + carbodyhatchback + carbodysedan + 
                carbodywagon  + cylindernumberthree + 
                carCompanybmw + carCompanybuick + carCompanydodge + carCompanyhonda + 
                carCompanyjaguar + carCompanymazda + carCompanymitsubishi + 
                carCompanynissan + carCompanyplymouth + carCompanyrenault + 
                carCompanysaab + carCompanytoyota + carCompanyvolkswagen, 
              data = cp_train)

# Checking summary of model_6
summary(model_6)
# Residual standard error: 1410 on 113 degrees of freedom
# Multiple R-squared:  0.9763,	Adjusted R-squared:  0.9702 
# F-statistic: 160.4 on 29 and 113 DF,  p-value: < 2.2e-16

#summary(model_5) # Residual standard error: 1407 on 112 degrees of freedom
                  # Multiple R-squared:  0.9766,	Adjusted R-squared:  0.9704 
                  # F-statistic:   156 on 30 and 112 DF,  p-value: < 2.2e-16

# OBSERVATION w.r.t. model_6:
# Removing 'cylindernumberfive' variable has not affected 
# the Multiple R-squared & Adjusted R-squared much compared to model_5

# Checking the vif of model_6
vif(model_6)

# Based on the vif values, checking the correlation between enginesize ,carwidth &  
# carbodyhatchback,carbodysedan & carbodywagon

cor(cp_1$enginesize,cp_1$carwidth) # 0.7354334
cor(cp_1$enginesize,cp_1$carbodyhatchback)# -0.216805
cor(cp_1$enginesize,cp_1$carbodywagon)#  -0.02751791
cor(cp_1$enginesize,cp_1$carbodysedan)#   0.08845934
cor(cp_1$carbodysedan,cp_1$carbodyhatchback)# -0.6757787
cor(cp_1$carbodywagon,cp_1$carbodyhatchback)# -0.2683588                    

# OBSERVATIONS w.r.t. model_6:
#9b.1. Variables with very high VIF along with their p-values are: 
# VARIABLE            -        VIF      -     (p-value)
# carbodyhatchback    -   12.447867     -     (0.001373 ** ) 
# carbodysedan        -   12.551450     -     (0.001373 ** )
# enginesize          -   9.059594      -     ( < 2e-16 ***)  
# carwidth            -   6.772255      -     (7.75e-07 ***) 
# carbodywagon        -   6.745588      -     (0.009846 **)
#9b.2. Variables with  high p-values along with their VIF values are
# VARIABLE           -  VIF         -   (p-value)
# carCompanysaab     -  1.688684    -   (0.243760    )
# cylindernumberthree-  1.645907    -   (0.054110 .  )


##10. Building model_7 based on the above observations.
# The following variables are removed
# VARIABLE           -  VIF         -   (p-value)
# carCompanysaab     -  1.688684    -   (0.243760    )
# cylindernumberthree-  1.645907    -   (0.054110 .  )

model_7 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                enginesize +  stroke + peakrpm + drivewheelrwd + 
                enginetypedohcv + enginetypel + 
                enginetypeohcf + enginetyperotor +  
                carbodyhardtop + carbodyhatchback + carbodysedan + 
                carbodywagon   + carCompanybmw + carCompanybuick + 
                carCompanydodge + carCompanyhonda +carCompanyjaguar + 
                carCompanymazda + carCompanymitsubishi + carCompanynissan + 
                carCompanyplymouth + carCompanyrenault + 
                carCompanytoyota + carCompanyvolkswagen, 
              data = cp_train)

# Checking summary of model_7
summary(model_7)
# Residual standard error: 1433 on 115 degrees of freedom
# Multiple R-squared:  0.9751,	Adjusted R-squared:  0.9692
# F-statistic: 166.7 on 27 and 115 DF,  p-value: < 2.2e-16

# summary(model_6)  # Residual standard error: 1410 on 113 degrees of freedom
                    # Multiple R-squared:  0.9763,	Adjusted R-squared:  0.9702 
                    # F-statistic: 160.4 on 29 and 113 DF,  p-value: < 2.2e-16

# OBSERVATION w.r.t. model_6:
# Removing 'cylindernumberthree' & 'carCompanysaab' variables have not affected 
# the Multiple R-squared & Adjusted R-squared much compared to model_6

# checking the vif for model_7
vif(model_7)

# OBSERVATIONS w.r.t. model_7:
#10b.1. Variables with very high VIF along with their p-values are: 
# VARIABLE            -        VIF      -     (p-value)
# carbodyhatchback    -   12.131527     -     (0.002279 **) 
# carbodysedan        -   12.400440     -     (0.005673 **)
# enginesize          -   8.515699      -     ( < 2e-16 ***)  
# carwidth            -   5.670360      -     (4.44e-06 ***) 
# carbodywagon        -   6.719219      -     (0.012888 * )
#10b.2. Variables with  high p-values along with their VIF values are
# VARIABLE          -   VIF         -   (p-value)
# enginetypel       -   1.676034    -   (0.287318  )
# carbodywagon      -   6.719219    -   (0.012888 * )


##11. Building model_8 based on the above observations.
# The following variables are removed
# VARIABLE          -   VIF         -   (p-value)
# enginetypel       -   1.676034    -   (0.287318  )
# carbodywagon      -   6.719219    -   (0.012888 * )

model_8 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                enginesize +  stroke + 
                peakrpm + drivewheelrwd + enginetypedohcv +
                enginetypeohcf + enginetyperotor +  
                carbodyhardtop + carbodyhatchback + carbodysedan + 
                carCompanybmw + carCompanybuick + carCompanydodge + carCompanyhonda + 
                carCompanyjaguar + carCompanymazda + carCompanymitsubishi + 
                carCompanynissan + carCompanyplymouth + carCompanyrenault + 
                carCompanytoyota + carCompanyvolkswagen, 
              data = cp_train)

# Checking summary of model_8
summary(model_8)
# Residual standard error: 1469 on 117 degrees of freedom
# Multiple R-squared:  0.9733,	Adjusted R-squared:  0.9676 
# F-statistic: 170.9 on 25 and 117 DF,  p-value: < 2.2e-16

# summary(model_7)# Residual standard error: 1433 on 115 degrees of freedom
                  # Multiple R-squared:  0.9751,	Adjusted R-squared:  0.9692
                  # F-statistic: 166.7 on 27 and 115 DF,  p-value: < 2.2e-16

# OBSERVATION w.r.t. model_8:
# Removing 'enginetypel' & 'carbodywagon' variables have not affected 
# the Multiple R-squared & Adjusted R-squared much compared to model_7

# checking the vif for model_8
vif(model_8)

# OBSERVATIONS w.r.t. model_8:
#11b.1. Variables with very high VIF along with their p-values are: 
# VARIABLE            -        VIF      -     (p-value)
# enginesize          -   7.652295      -     ( < 2e-16 ***)  
# carwidth            -   5.205759      -     (8.33e-05 ***) 

#11b.2. Variables with  insignifiacnt p-values along with their VIF values are
# VARIABLE          -   VIF         -   (p-value)
# carbodyhardtop    -   1.615227    -   (0.117045)
# carbodysedan      -   2.491424    -   (0.269599 )
# carbodyhatchback  -   2.540151    -   (0.077493 .  )


##12. Building model_9 based on the above observations.
# The following variables are removed
# VARIABLE          -   VIF         -   (p-value)
# carbodyhardtop    -   1.615227    -   (0.117045)
# carbodysedan      -   2.491424    -   (0.269599 )
# carbodyhatchback  -   2.540151    -   (0.077493 .  )

model_9 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                enginesize +  stroke + 
                peakrpm + drivewheelrwd + enginetypedohcv +
                enginetypeohcf + enginetyperotor +  
                carCompanybmw + carCompanybuick + carCompanydodge + carCompanyhonda + 
                carCompanyjaguar + carCompanymazda + carCompanymitsubishi + 
                carCompanynissan + carCompanyplymouth + carCompanyrenault + 
                carCompanytoyota + carCompanyvolkswagen, 
              data = cp_train)

# Checking summary of model_9
summary(model_9)
# Residual standard error: 1478 on 120 degrees of freedom
# Multiple R-squared:  0.9723,	Adjusted R-squared:  0.9673 
# F-statistic: 191.8 on 22 and 120 DF,  p-value: < 2.2e-16

#summary(model_8) # Residual standard error: 1469 on 117 degrees of freedom
                  # Multiple R-squared:  0.9733,	Adjusted R-squared:  0.9676 
                  # F-statistic: 170.9 on 25 and 117 DF,  p-value: < 2.2e-16


# OBSERVATION w.r.t. model_9:
# Removing 'carbodyhardtop ','carbodysedan' & 'carbodyhatchback' variables have not affected 
# the Multiple R-squared & Adjusted R-squared much compared to model_8

# checking the vif for model_9
vif(model_9)

# OBSERVATIONS w.r.t. model_9:
#12b.1. Variables with very high VIF along with their p-values are: 
# VARIABLE            -        VIF      -     (p-value)
# enginesize          -   7.395723      -     ( < 2e-16 ***)  
# carwidth            -   5.052143      -     (1.85e-05 ***) 

#12b.2. Variables with  less significance p-values along with their VIF values are
# VARIABLE                -   VIF         -   (p-value)
# enginetypedohcv         -   1.174642    -   (0.006538 **)
# carCompanyrenault       -   1.401144    -   (0.001741 **)
# carCompanyvolkswagen    -   1.647373    -   (0.003393 **)


##13. Building model_10 based on the above observations.
# The following variables are removed

# VARIABLE                -   VIF         -   (p-value)
# enginetypedohcv         -   1.174642    -   (0.006538 **)
# carCompanyrenault       -   1.401144    -   (0.001741 **)
# carCompanyvolkswagen    -   1.647373    -   (0.003393 **)

model_10 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                 enginesize +  stroke + 
                 peakrpm + drivewheelrwd  +
                 enginetypeohcf + enginetyperotor +  
                 carCompanybmw + carCompanybuick + carCompanydodge + carCompanyhonda + 
                 carCompanyjaguar + carCompanymazda + carCompanymitsubishi + 
                 carCompanynissan + carCompanyplymouth +
                 carCompanytoyota , 
               data = cp_train)

# Checking summary of model_10
summary(model_10)
# Residual standard error: 1592 on 123 degrees of freedom
# Multiple R-squared:  0.9671,	Adjusted R-squared:  0.962 
# F-statistic: 190.5 on 19 and 123 DF,  p-value: < 2.2e-16

#summary(model_9) # Residual standard error: 1478 on 120 degrees of freedom
                  # Multiple R-squared:  0.9723,	Adjusted R-squared:  0.9673 
                  # F-statistic: 191.8 on 22 and 120 DF,  p-value: < 2.2e-16


# OBSERVATION w.r.t. model_10:
# Removing 'enginetypedohcv ','carCompanyrenault' & 'carCompanyvolkswagen' variables have not affected 
# the Multiple R-squared & Adjusted R-squared much compared to model_9

# checking the vif for model_10
vif(model_10)

# OBSERVATIONS w.r.t. model_10:
#13b.1. Variables with very high VIF along with their p-values are: 
# VARIABLE            -        VIF      -     (p-value)
# enginesize          -     7.356493    -  ( < 2e-16 ***)  
# carwidth            -     4.788021    -     (1.12e-06 ***) 

#13b.2. Variables with  less significance p-values along with their VIF values are
# VARIABLE                -   VIF         -   (p-value)
# carCompanyhonda         -   1.174642    -   (0.105173    )
# carCompanymazda         -   1.401144    -   (0.001741 **)
# carCompanynissan        -   1.647373    -   (0.003393 **)
# carCompanytoyota        -   1.837721    -   (0.005239 ** )


##14. Building model_11 based on the above observations.
# The following variables are removed

# VARIABLE                -   VIF         -   (p-value)
# carCompanyhonda         -   1.174642    -   (0.105173    )
# carCompanymazda         -   1.401144    -   (0.001741 **)
# carCompanynissan        -   1.647373    -   (0.003393 **)
# carCompanytoyota        -   1.837721    -   (0.005239 ** )

model_11 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                 enginesize +  stroke + 
                 peakrpm + drivewheelrwd  +
                 enginetypeohcf + enginetyperotor +  
                 carCompanybmw + carCompanybuick + carCompanydodge + 
                 carCompanyjaguar +  carCompanymitsubishi + 
                 carCompanyplymouth,
               data = cp_train)

summary(model_11)

# Residual standard error: 1669 on 127 degrees of freedom
# Multiple R-squared:  0.9627,	Adjusted R-squared:  0.9583 
# F-statistic: 218.4 on 15 and 127 DF,  p-value: < 2.2e-16

#summary(model_10)  # Residual standard error: 1592 on 123 degrees of freedom
                    # Multiple R-squared:  0.9671,	Adjusted R-squared:  0.962 
                    # F-statistic: 190.5 on 19 and 123 DF,  p-value: < 2.2e-16

# OBSERVATION w.r.t. model_11:
# Removing 'carCompanyhonda','carCompanymazda','carCompanynissan '& 'carCompanytoyota' variables have not affected 
# the Multiple R-squared & Adjusted R-squared much compared to model_10
# Although, all variables have a p value below 0.05, the number of variables is still too large.

# checking the vif of model_11
vif(model_11)

# OBSERVATIONS w.r.t. model_11:
#14b.1. Variables with very high VIF along with their p-values are: 
# VARIABLE            -        VIF      -     (p-value)
# enginesize          -     7.018760    -     ( < 2e-16 ***)  
# carwidth            -     3.949610    -     (6.14e-10 ***) 

#14b.2. Variables with  less significance p-values along with their VIF values are
# VARIABLE                -   VIF         -   (p-value)
# carCompanyplymouth      -   1.174642    -   (0.032350 * )
# carCompanydodge         -   1.401144    -   (0.017144 * )
# drivewheelrwd           -   2.411332    -   (0.002147 ** )


##15. Building a model by removing the following variables
# VARIABLE                -   VIF         -   (p-value)
# carCompanyplymouth      -   1.174642    -   (0.032350 * )
# carCompanydodge         -   1.401144    -   (0.017144 * )


model_12 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                 enginesize +  stroke + drivewheelrwd  +
                 peakrpm + enginetypeohcf + enginetyperotor +  
                 carCompanybmw + carCompanybuick +  
                 carCompanyjaguar +  carCompanymitsubishi ,
               data = cp_train)

summary(model_12)

# Residual standard error: 1716 on 129 degrees of freedom
# Multiple R-squared:  0.9599,	Adjusted R-squared:  0.9559 
# F-statistic: 237.7 on 13 and 129 DF,  p-value: < 2.2e-16

#summary(model_11)  # Residual standard error: 1669 on 127 degrees of freedom
                    # Multiple R-squared:  0.9627,	Adjusted R-squared:  0.9583 
                    # F-statistic: 218.4 on 15 and 127 DF,  p-value: < 2.2e-16

# OBSERVATION w.r.t. model_12:
# Removing 'carCompanyplymouth' & 'carCompanydodge' variables have not affected 
# the Multiple R-squared & Adjusted R-squared much compared to model_11

# Checking the vif for model_12
vif(model_12)

# OBSERVATIONS w.r.t. model_12:
#15b.1. Variables with very high VIF along with their p-values are: 
# VARIABLE            -        VIF      -     (p-value)
# enginesize          -     6.763707    -     ( < 2e-16 ***)  
# carwidth            -     3.686352     -    (7.42e-12 ***) 

#15b.2. Variables with  less significance p-values along with their VIF values are
# VARIABLE                -   VIF         -   (p-value)
# carCompanymitsubishi    -   1.174642    -   0.00123 ** )
# drivewheelrwd           -   2.411332    -   (0.00921 ** )


##16. Building a model by removing the Variables with  less significance p-values.
# VARIABLE                -   VIF         -   (p-value)
# carCompanymitsubishi    -   1.174642    -   0.00123 ** )
# drivewheelrwd           -   2.411332    -   (0.00921 ** )

model_13 <- lm(formula = price ~ aspiration + enginelocation + carwidth + 
                 enginesize +  stroke + 
                 peakrpm + enginetypeohcf + enginetyperotor +  
                 carCompanybmw + carCompanybuick +  
                 carCompanyjaguar  ,
               data = cp_train)

summary(model_13)
# Residual standard error: 1801 on 131 degrees of freedom
# Multiple R-squared:  0.9552,	Adjusted R-squared:  0.9514 
# F-statistic: 253.8 on 11 and 131 DF,  p-value: < 2.2e-16


#summary(model_12)  # Residual standard error: 1716 on 129 degrees of freedom
                    # Multiple R-squared:  0.9599,	Adjusted R-squared:  0.9559 
                    # F-statistic: 237.7 on 13 and 129 DF,  p-value: < 2.2e-16

# OBSERVATION w.r.t. model_12:
# Removing ' carCompanymitsubishi ' & 'drivewheelrwd' variables have not affected 
# the Multiple R-squared & Adjusted R-squared much compared to model_12
# All the variables are significant in terms of their p-value
# model_13 has 11 variables with all of them being significant

# checking the vif of model_13
vif(model_13)

# OBSERVATION:
# Except for enginesize & carwidth the vif of all variables is less.
# For enginesize & carwidth, the p-value is significant even though the their vif is high.


#------------------------------------------------------------------------------------# 
#                                  Model Evaluation                                  #
#------------------------------------------------------------------------------------#

##1. Predicting the results in test dataset
Predict_model13 <- predict(model_13,cp_test[,-19])
cp_test$predicted_price <- Predict_model13

##2. checking the r square between actual and predicted prices. 
r <- cor(cp_test$price,cp_test$predicted_price)
r # 0.9135827
rsquared <- cor(cp_test$price,cp_test$predicted_price)^2
rsquared # 0.8346333


##3. Density plot between the actual price & predicted price
Plot_actual_predicted_density <- ggplot(cp_test, aes(x = price, color = 'actual price')) + geom_density() +
  geom_density(aes(x = predicted_price, color = 'predicted price'))  +
  scale_colour_manual(values = c("predicted price"="green",  "actual price"="red")) +
  labs(title = "Density plot between the actual price & predicted price",
       x = "price", y = "") 

print(Plot_actual_predicted_density)

##4. Scatter plot between the actual price & predicted price
Plot_actual_predicted_scatter <- ggplot(cp_test, aes(x = price, y= predicted_price, fill = predicted_price)) + 
  geom_point(shape = 1)+ geom_smooth(method='lm') +
  annotate("text", x=35000, y=10000, label = "r-squared = 0.83") +
  labs(title = "Scatter plot between the actual price & predicted price",
       x = "Price", y = "Predicted Price")

print(Plot_actual_predicted_scatter)

##5.Line Plot between the actual price & predicted price
Plot_actual_vs_predicted_line <- ggplot(data=cp_test, aes(x=seq(1:62), group = 1)) +
  geom_line(aes(y = price, color = 'Actual price')) +
  geom_line(aes(y = predicted_price,color = 'Predicted_price')) + 
  scale_colour_manual(values = c("Actual price"="orange", "Predicted_price" ="green"))+
    scale_y_continuous(breaks=seq(0,max(cp_test$price),5000)) +
  labs(title = "Plot between the actual price & predicted price",
       x = "", y = "Price")
  
print(Plot_actual_vs_predicted_line)

##6. Plot showing the residuals.
plot(model_13$residuals)


# Conclusion:
# The rsquared value is 0.8346333 implying that the model explains 83% variability of the test data around its mean.
# With bivariate analysis & model evaluation we can predict the price of cars from its characterstics.
# The car company, the engine size, drive wheels, aspiration play a key role in predicting the price of cars.
# Other factors like engine location ,fueltype, fuelsystem can help determine the groups in which the cars should be priced.



#############################################################################################
